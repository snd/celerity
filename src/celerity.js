// Generated by CoffeeScript 1.3.3
var checkConfig, defaultPrefix, getBucketMs, getPrefix, isInt, lua;

lua = require('./lua');

defaultPrefix = 'celerity:';

isInt = function(n) {
  return ('number' === typeof n) && (n % 1 === 0);
};

checkConfig = function(config) {
  if ('object' !== typeof config) {
    throw new Error('config argument must be an object');
  }
  if ('object' !== typeof config.redis) {
    throw new Error('config.redis argument must be an object');
  }
  if (!isInt(config.timespanMs)) {
    throw new Error('config.timespanMs argument must be an integer');
  }
  if (!isInt(config.bucketCount)) {
    throw new Error('config.bucketCount argument must be an integer');
  }
  if ((config.prefix != null) && 'string' !== typeof config.prefix) {
    throw new Error('config.prefix argument must be a string');
  }
  if (!isInt(getBucketMs(config))) {
    throw new Error('config.timespanMs must be evenly dividable by config.bucketCount');
  }
};

getBucketMs = function(config) {
  return config.timespanMs / config.bucketCount;
};

getPrefix = function(config) {
  return config.prefix || defaultPrefix;
};

module.exports = {
  increment: function(config, key, n, cb) {
    var bucketIndex, expire, fullKey, prefix;
    if (n == null) {
      n = 1;
    }
    checkConfig(config);
    prefix = getPrefix(config);
    bucketIndex = Math.floor((Date.now() % config.timespanMs) / getBucketMs(config));
    fullKey = prefix + key + ':' + bucketIndex;
    expire = config.timespanMs;
    return config.redis["eval"](lua.increment, 1, fullKey, n, expire, cb);
  },
  read: function(config, key, cb) {
    var prefix;
    checkConfig(config);
    prefix = getPrefix(config);
    return config.redis["eval"](lua.read, 1, prefix + key, config.bucketCount, cb);
  }
};
